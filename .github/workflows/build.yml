name: Build
env:
  tag_regex_st: '^v?[0-9]+\.[0-9]+\.[0-9]+$'
  tag_regex_rc: '^v?[0-9]+\.[0-9]+\.[0-9]+rc[0-9]+$'
on:
  push:
    tags:
      - 'v?[0-9]+.[0-9]+.[0-9]+'
      - 'v?[0-9]+.[0-9]+.[0-9]+rc[0-9]+'

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Get the Ref
      id: get-ref
      uses: ankitvgupta/ref-to-tag-action@master
      with:
        ref: ${{ github.ref }}
        head_ref: ${{ github.head_ref }}

    - name: Set Stable Flag
      id: is-stable
      run: |
        if [[ ${{ steps.get-ref.outputs.tag }} =~ ${{ env.tag_regex_st }} ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
            echo "Build triggered on stable release"
        else
            echo "match=false" >> $GITHUB_OUTPUT
        fi

    - name: Set RC Flag
      id: is-rc
      run: |
        if [[ ${{ steps.get-ref.outputs.tag }} =~ ${{ env.tag_regex_rc }} ]]; then
            echo "match=true" >> $GITHUB_OUTPUT
            echo "Build triggered on stable release"
        else
            echo "match=false" >> $GITHUB_OUTPUT
        fi

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Build
      run: |
        ${{ steps.is-rc.outputs.match }} && echo "Building a release candidate ..." || true
        ${{ steps.is-stable.outputs.match }} && echo "Building a stable release ..." || true
        make

    - name: Create Release
      id: create_release
      if: steps.is-stable.outputs.match == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Create PreRelease
      id: create_prerelease
      if: steps.is-rc.outputs.match == 'true'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: true

    - name: Upload binaries
      id: upload-das2go
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./das2go
        asset_name: das2go
        asset_content_type: application/octet-stream

    - name: Build image
      run: |
        curl -ksLO https://raw.githubusercontent.com/dmwm/CMSKubernetes/master/docker/das-server/Dockerfile
        curl -ksLO https://raw.githubusercontent.com/dmwm/CMSKubernetes/master/docker/das-server/run.sh
        sed -i -e "s,ENV TAG=.*,ENV TAG=${{steps.get-ref.outputs.tag}},g" Dockerfile
        chmod +x run.sh
        docker build . --tag docker.pkg.github.com/dmwm/das2go/das2go --tag docker.pkg.github.com/dmwm/das2go/das2go:${{steps.get-ref.outputs.tag}}
        docker tag docker.pkg.github.com/dmwm/das2go/das2go registry.cern.ch/cmsweb/das-server
        if ${{ steps.is-stable.outputs.match }}; then
              docker tag docker.pkg.github.com/dmwm/das2go/das2go:${{steps.get-ref.outputs.tag}} registry.cern.ch/cmsweb/das-server:${{steps.get-ref.outputs.tag}}-stable
        fi

    - name: Login to registry.cern.ch
      uses: docker/login-action@v1.6.0
      with:
        registry: registry.cern.ch
        username: ${{ secrets.CERN_LOGIN }}
        password: ${{ secrets.CERN_TOKEN }}

    - name: Publish image to registry.cern.ch
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.CERN_LOGIN }}
        password: ${{ secrets.CERN_TOKEN }}
        registry: registry.cern.ch
        repository: cmsweb/das-server
        tag_with_ref: true

    - name: Login to Registry
      uses: docker/login-action@v1.6.0
      with:
        registry: docker.pkg.github.com
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

#     - name: Publish image
#       uses: docker/build-push-action@v1
#       with:
#         username: ${{ github.actor }}
#         password: ${{ secrets.GITHUB_TOKEN }}
#         registry: docker.pkg.github.com
#         repository: dmwm/das2go/das2go
#         tag_with_ref: true

    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        load: true
        tags: cmssw/das-server:${{steps.get-ref.outputs.tag}}
    - run: docker push cmssw/das-server:${{steps.get-ref.outputs.tag}}

    - name: Push new image to k8s
      run: |
        curl -ksLO https://raw.githubusercontent.com/vkuznet/imagebot/main/imagebot.sh
        sed -i -e "s,COMMIT,${{github.sha}},g" -e "s,REPOSITORY,${{github.repository}},g" -e "s,NAMESPACE,das,g" -e "s,TAG,${{steps.get-ref.outputs.tag}},g" -e "s,IMAGE,registry.cern.ch/cmsweb/das-server,g" -e "s,SERVICE,das-server,g" -e "s,HOST,${{secrets.IMAGEBOT_URL}},g" imagebot.sh
        chmod +x imagebot.sh
        cat imagebot.sh
        sh ./imagebot.sh
